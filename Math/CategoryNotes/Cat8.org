# -*- org-export-babel-evaluate: nil -*-
#+PROPERTY: header-args :eval never-export
#+PROPERTY: header-args:python :session cat 1.1
#+PROPERTY: header-args:ipython :session cat 1.1
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/yiddi/git_repos/YIDDI_org_export_theme/theme/org-nav-theme_cache.css" >
#+HTML_HEAD: <script src="/home/yiddi/git_repos/YIDDI_org_export_theme/theme/org-nav-theme.js"></script>
#+HTML_HEAD: <script type="text/javascript">
#+HTML_HEAD: <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+OPTIONS: H:3 num:nil ^:nil _:nil tags:not-in-toc
#+TITLE: 群论笔记 八
#+AUTHOR: yiddishkop
#+EMAIL: [[mailto:yiddishkop@163.com][yiddi's email]]
#+TAGS: {PKGIMPT(i) DATAVIEW(v) DATAPREP(p) GRAPHBUILD(b) GRAPHCOMPT(c)} LINAGAPI(a) PROBAPI(b) MATHFORM(f) MLALGO(m)

* Cat 8.1 Function objects, exponential
  :PROPERTIES:
  :CUSTOM_ID: cat-8.1-function-objects-exponential
  :END:

objects compose a set, arrows compose a home set(can be illustrated as a
point), set is object. it's a circle


external hom-set and inner hom-set

because function is a object(set), so we can apply all the previous
lectures theory to function * unviersal construction, pattern * product
and coproduct * ...

Cartesian product, we can generlize it to categorical product.

in order to define a function ,you must ifrst have a product(or ADT)

like if you want to define exponential, you must has a multiplication.

begin with universal construnction : 1. pattern 2. ranking

1. pattern
   components: a,z,g,b
2. ranking by unique morphism go back to see the pattern and ranking of
   product and coproduct.

z' X a -> z X a

a product is a bifunctor, take two make 3nd one alss two function make
3nd one go back to see bifunctor of product.

#+CAPTION: ranking

a unique morphism h exist, such that commute graph exsit --

g' = g * (h X id)

a=>b is fucntion object => is just a symbol

#+CAPTION: move further

imperative language f(x,y,z) is like f((x,y,z)) a functin one multi arg,
is function on a tuple(of args)

g' = g * (h X id) => g' = eval * (h X id)

one h ---> one g

??? 25:00 two way of thinking : 1. g is from product(zXa) to b 2. one g
for one h

then,

h:: z->(a->b) g:: (z,a)->b

g and h are equalent.

it's something about curry, h is the curry version of g

curry:: ((a, b)->c) -> (a ->(b->c)) curry f = lambda a -> (lamb b ->
f(a,b))

uncurry

in haskell: arrow -> will associate with right function call f a b, will
associate with left

*** exponential
    :PROPERTIES:
    :CUSTOM_ID: exponential
    :END:

in Cat people call function object exponential, =a->b= is =b^a=

Bool->Int for 1 function , he can ONLY get 2 Int, one for true, one fro
false;

if refer to type, from Bool to Int, *the number of functions* is just
decided by Int --- like some reverse procession ,from return type to
input type

Int X Int, a cartesian product.

#+CAPTION: exponential of function

it shows you connection between product and function type---exponential,
iterative product gives you exponential.

Cartesian closed category --- CCC --- has terminal object, 1. object\^0
= terminal object 2. object\^1 = object itself 3. object\^n =
exponential

Bi-Cartesian closed category --- BCCC

we have seen that , * the ADT using product gives you a monoid * the ADT
using coproduct gives you a another monoid * the ADT using initial
object(void) gives you a monoid * the ADT using terminal object(unit)
gives you a monoid TODO * the ADT using exponential gives you a monoid

if we combine them, it will gives you a semi-ring

If we add exponential to it:

#+CAPTION: many kinds of exponential

* Cat 8.2 Type algebra, Curry-Howard-Lambek isomorphism

** Type algebra
   :PROPERTIES:
   :CUSTOM_ID: type-algebra
   :END:


Either b c -> a you will need a case match to implement this function


It's something curry and uncurry

#+CAPTION: expression3

all these definition two side of "=", can replace each other.

like:

#+BEGIN_EXAMPLE
    def curryFn(b:Int)(c:String):Double = def uncurryFn(c:String): Int=>Double
    //(b,c)->a = a^(b*c) = (a^b)^c = c ->(b->a)
#+END_EXAMPLE

** Curry-Howard-Lambek

all these stuff also can be used in logic area. This is the basis of
famous curry howard isomorphism --- proposition as types

lambda calculas

statement can be true of false

proposition correspond to types in programming

true or false / inhabitted or uninhabitted (type has value or not
inside)

#+BEGIN_VERSE
  implication a=>b | a ∨ b | a ∧ b | false | true |
  function | Either a b | (a,b) | void | () |
  b\^a(exponential) | a × b | a or b | initial obj | terminal objt |
#+END_VERSE

((a=>b), a) -> b

a=>b ∧ a -> b

one-to-one relation between logic an type

mathematic people build a theory in logic; then CS people will take it
and think how can I implement this in language, like the linear type or
structural type system.

[[https://www.wikiwand.com/en/Substructural_type_system][substructural type system]]
