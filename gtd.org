#+TAGS: WORK FAMILY PERSONAL
* Inbox

** CANCELLED [#B] http://cs2.swfc.edu.cn/~wx672/lecture_notes/linux/latex/latex_tutorial.html
   CLOSED: [2017-03-13 Mon 13:05]
   :LOGBOOK:
   - State "CANCELLED"  from "TODO"       [2017-03-13 Mon 13:05] \\
     尋思,暫時不需要學習 latex 語法,分散了學習時間
   :END:
** CANCELLED [#B] make sure which item affect the connection in my /etc/resolv.conf
   CLOSED: [2017-03-27 Mon 11:20]
   :LOGBOOK:
   - State "CANCELLED"  from "TODO"       [2017-03-27 Mon 11:20] \\
     dont have enough time and knowledge base
   :END:
   in my /etc/reslov.conf , i added 4 items, i wana know which really make my chrome
   connect to google.
   1. commant "search vpn"?
   2. commant "8.8.8.8"
   3. ...
** SOMEDAY [#B] 通讀子龍的 emacs 配置                               :spacemacs:

** DONE [#B] 學習如何給 chrome capture 的文章做腳注筆記
   CLOSED: [2017-03-27 Mon 11:20] SCHEDULED: <2017-03-13 Mon 09:00>
   :PROPERTIES:
   :Effort:   10
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-03-27 Mon 11:20]
   - need some more improvement
   :END:

** TODO [#B] 明天要詳細理解,肢解後歸檔代碼                  :emacs:hack:code:
   SCHEDULED: <2017-03-13 Mon 09:30>
   :PROPERTIES:
   :Effort:   30
   :END:
[[file:journal.org::*%E5%A4%A7%E7%A5%9E%E6%94%B9%E9%80%B2elfeed%E7%9A%84%E9%A1%8F%E8%89%B2%E9%A1%AF%E7%A4%BA,%E4%B8%A6%E5%A2%9E%E5%8A%A0%E6%89%93%E5%88%86%E5%8A%9F%E8%83%BD][大神改進 elfeed 的顏色顯示,並增加打分功能]]

** TODO [#B] 昨天沒有解決給 elfeed entry 打分並高亮
   SCHEDULED: <2017-03-13 Mon 10:00>
[[file:~/.spacemacs.d/layers/zilongshanren-misc/packages.el::;;%20yiddi:add%20to%20customize%20the%20appearance%20of%20elfeed]]
LOGBOO:
1. 我開始在 zilong 配置中增加了 elfeed
2. 此後就一直出現, elfeed-feeds 被重置的問題
3. 這一次打分程序無效
4. 我就又把 elfeed 從子龍的生命 packages 中刪除了
END:

** DONE [#C] 給老哥電話訂家具
   CLOSED: [2017-03-27 Mon 11:21] SCHEDULED: <2017-03-14 Tue 14:00>
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-03-27 Mon 11:21]
   :END:
** DONE [#B] 下午房子砸牆，陽臺
   CLOSED: [2017-03-27 Mon 11:21] SCHEDULED: <2017-03-12 Sun 16:00>
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-27 Mon 11:21]
   :END:
** DONE [#C] 溝通解決新城窗戶莊歪問題
   CLOSED: [2017-03-27 Mon 11:21] SCHEDULED: <2017-03-13 Mon 13:00>
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2017-03-27 Mon 11:21]
   - who response this vendor, says that he will order someone to fix this issue
   :END:

** TODO [#B] 整理 journal.org 中的所有文章格式整理,美化,並歸檔

** TODO [#B] 這個問題沒有解決,代碼是正確的,但 elfeed-scratch 中並沒有顯示出效果
[[file:~/.spacemacs.d/layers/zilongshanren-misc/packages.el::;;%20starting%20point.][大神定制 elfeeed entry 顏色顯示]]

** TODO [#B] 查看那天觀看用 emacs 進行科學研究的 youtube 視頻
   重點在於,他用了哪些包,以此來擴展一下自己的視野

** TODO [#A] 繼續整理自己的全知識 doc
   DEADLINE: <2017-03-13 Mon 11:30> SCHEDULED: <2017-03-14 Tue 08:00>

** CANCELLED [#B] 學習 skeleton-mode                               :PERSONAL:
   CLOSED: [2017-08-11 Fri 19:09] DEADLINE: <2017-03-14 Tue 16:00> SCHEDULED: <2017-03-14 Tue 14:00>
   :LOGBOOK:
   - State "CANCELLED"  from "DONE"       [2017-08-11 Fri 19:09] \\
     并没有实施，似乎并不重要
   - State "DONE"       from "STARTED"    [2017-08-11 Fri 19:09]
   CLOCK: [2017-03-15 Wed 09:56]--[2017-03-15 Wed 13:12] =>  3:16
   CLOCK: [2017-03-15 Wed 09:49]--[2017-03-15 Wed 09:53] =>  0:04
   CLOCK: [2017-03-15 Wed 09:25]--[2017-03-15 Wed 09:34] =>  0:09
   CLOCK: [2017-03-14 Tue 09:41]--[2017-03-14 Tue 11:41] =>  2:00
   CLOCK: [2017-03-14 Tue 06:58]--[2017-03-14 Tue 07:43] =>  0:45
   SOME-TIPS:
         1. checklists are good for making sure that you complete tasks more
            consistently, not missing any important steps. you can work faster
            when there’s a guide, since you don’t have to keep thinking of the
            next step each time. The simple act of checking things off can
            encourage you to put in more effort, since the list shows you your
            progress. It also makes it easier to remember to follow up.
         2. 用鏈接來組織筆記架構,用鏈接來記錄每天任務的完成列表存檔

   :END:

** DONE [#B] 搞清楚 pandoc-mode 是怎麼運行的,最好能實現自動化把 html 轉爲 org
   CLOSED: [2017-03-27 Mon 11:22]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-03-27 Mon 11:22]
   :END:
   比如一旦發現 download 文件中出現 html,就自動轉換爲某個文件夾下的 org

** DONE [#B] 找個模板能讓 src-block 裏的代碼背景色高粱
   CLOSED: [2017-08-11 Fri 19:08]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-08-11 Fri 19:08]
   :END:

** DONE [#B] appointment 好像起作用了,看看他是如何工作的.
   CLOSED: [2018-04-17 Tue 08:19]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-04-17 Tue 08:19]
   :END:
   我記得應該是加在 org zilong package 位置的代碼,關於 reminder 的.
   他是 12min before 提醒的,彈出了一個小 buffer 左下角,持續了幾秒鍾,消失了
   看看如何設置
   13:48 左右


** TODO 學習這種思想

         1. Checklists are good for making sure that you complete tasks more
            consistently, not missing any important steps. You can work faster
            when there’s a guide, since you don’t have to keep thinking of the
            next step each time. The simple act of checking things off can
            encourage you to put in more effort, since the list shows you your
            progress. It also makes it easier to remember to follow up.
         2. 用鏈接來組織筆記架構,用鏈接來記錄每天任務的完成列表存檔

** DONE [#B] 監工窗臺維修進度, 2017-03-15.
   CLOSED: [2017-08-11 Fri 19:08] SCHEDULED: <2017-03-17 Fri 09:30>
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-08-11 Fri 19:08]
   :END:
   如果兩天還沒開始動工,就警告租房補償.
   他有可能在消極怠工,拖時間.反正我就耗着,你也得住.
   這樣,我們已經累積溝通好幾次了.這個問題必須搞好.反正現在都流行上訪投訴.
   再不行我就打 315,也剛過去沒幾天.你看着辦,我現在也不要賠償,你就給我把窗戶
   弄好.


** TODO [#B] 應該把學習編程當成翻譯課,每天練習翻譯
   SCHEDULED: <2017-03-16 Thu 09:00>

** TODO [#B] 學習陳斌的文章, yasnippet 內部是支持代碼運行的,似乎...有點想法
   SCHEDULED: <2017-03-20 Mon 09:00>
http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html

** TODO [#B] 看看這個視頻中的公式是如何直接輸出出來的.
   SCHEDULED: <2017-03-20 Mon 09:00>
https://www.youtube.com/watch?v=cRUCiF2MwP4

** TODO [#B] 我未來的知識庫,肯定少不了這個
   SCHEDULED: <2017-03-20 Mon 09:00>
https://xapian.org/docs/

** DONE [#B] 總結一下 mu4e 的配置
   CLOSED: [2017-08-11 Fri 19:06] DEADLINE: <2017-08-11 Fri> SCHEDULED: <2017-03-20 Mon 09:00>
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-08-11 Fri 19:06]
   :END:
http://www.brool.com/post/using-mu4e/

** TODO  學習一下那個如何記賬的夥計 youtube
   SCHEDULED: <2017-03-20 Mon 14:00>

** DONE [#B] ABC's loan due to check
   CLOSED: [2017-03-27 Mon 11:19] SCHEDULED: <2017-03-22 Wed 10:30>
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-03-27 Mon 11:19]
   :END:

** CANCELLED [#B] 给 org 不同的 block 分配不同的颜色
   CLOSED: [2017-08-11 Fri 19:06]
   :LOGBOOK:
   - State "CANCELLED"  from "TODO"       [2017-08-11 Fri 19:06] \\
     鉴于 org note 并不是那么美观，而且这个耗时的任务暂时应该搁浅
   :END:
   比如我在做笔记时，习惯用 quote-block 记录算法，
   用 src-block 记录代码，我希望一眼就能区分两者。
   所以我需要对不同的 block 设置不同的颜色

** CANCELLED [#B] 利用 EGO 这个中文静态站点来搞自己的网页
   CLOSED: [2017-08-11 Fri 19:07]
   :LOGBOOK:
   - State "CANCELLED"  from "TODO"       [2017-08-11 Fri 19:07] \\
     始终没能抽出时间来处理自己的网页，暂时搁浅，等有时间再说
   :END:

https://emacs-china.github.io/EGO/

<<<<<<< HEAD
** TODO [#B] This is just a test, so deleted some time
* Workspace

** TODO [#B] PROG: match and case as parameter

   #+BEGIN_SRC scala
     import java.util.Calendar

     val date = raw"(\d{4})-(\d{2})-(\d{2})".r

     val dates = "Important dates in history: 2004-01-20, 1958-09-05, 2010-10-06, 2011-07-15"

     val redacted    = date.replaceAllIn(dates, "XXXX-XX-XX")
     val yearsOnly   = date.replaceAllIn(dates, m => m.group(1))

     val months      = (0 to 11).map {
       i => val c = Calendar.getInstance;
            c.set(2014, i, 1);
            f"$c%tb" }

     val reformatted = date.replaceAllIn(
       dates,
       // match can be passed as non-fn para
       _ match { case date(y,m,d) => f"${months(m.toInt - 1)} $d, $y" })
   #+END_SRC

   case clause can be passed to fn para;
   match clasue can be passed to non-fn para;

   *Beautiful these two brothers can hold all the parameter business.*

** TODO [#B] PORG: some strange ERROR about case function
   #+BEGIN_SRC scala
     arr.reduceLeft{    // RIGHT
       (a, b) => if (a>=b) a else b
     }

     val fn: (Int,Int) => Int = {
       case (a, b) => if (a>=b) a else b
     }

     arr.reduceLeft(fn) // RIGHT

     arr.reduceLeft{    // WRONG
       case (a:Int,b:Int) => if (a>=b) a else b
     }
   #+END_SRC

** TODO [#B] compare two snippet codes about the case function

   #+BEGIN_SRC scala
     val (rainyTmp, rainyDays2) = data.foldLeft(0.0 -> 0) {
       case ((a, b), tempInfo) if tempInfo.prcp >= 1.0 => (a+tempInfo.tmax, b+1)
     }
   #+END_SRC

   #+BEGIN_SRC scala
     val (rainySum,rainyCount2) = data.foldLeft(0.0 -> 0) {
       case ((sum, cnt), td) =>
         if(td.precip < 1.0) (sum, cnt) else (sum + td.tmax, cnt + 1)
     }
   #+END_SRC

   The biggest difference is that: *first will lead to MatchError*

   * pattern and  if-guard => small pattern
   * pattern then if-gurad => same pattern

   So, the first case clause can not match all situation, and will lead *MatchError*
   the ~pattern and if-guard~ is always used to *ignore* some unrequire element by
   ~for~ and ~flatMap~.

   #+BEGIN_SRC scala
     import scala.util.Random

     val arrTup = Array.fill(30)((Random.nextInt(100), Random.nextInt(100)))

     // ignore all elements whose a <= 50
     for((a,b) <- arrTup
         if a>50) yield (a,b)

     // ignore all elements whose a <= 50
     arrTup.flatMap{
       case (a, b) if a>50 => Seq(a -> b)
       case _ => Seq.empty
     }

   #+END_SRC

** TODO [#B] Compare two code snippet about case clause

   #+BEGIN_SRC scala
     case (a, b) => {
       val sum = b.foldLeft(0.0){(a,b) => a + b.tmax}
       (a, sum)
     }
   #+END_SRC

   #+BEGIN_SRC scala
     case (m, days) =>
           m -> days.foldLeft(0.0)((sum, td) => sum + td.tmax) / days.length
   #+END_SRC

   It's obviously that, the latter one is better.

   In fact, functional languages are very skilled at dealing with *holographic*

   one part by one part related:

   #+BEGIN_QUOTE
   (a, b)
   a -> { some functions about b}
   #+END_QUOTE

** TODO [#B] new spacemacs hotkey find
   | C =   | highlight all this 'word' in current buffer |   |
   | C = e | modify all this 'wrod' same time            |   |
   | C = / | find this word in project                   |   |
   | C = f | find this word in file                      |   |
   | C = b | find this word in buffer                    |   |

** TODO [#B] find new key in spc
   | C o | jump back |

** TODO [#B] String has a boolean method: start with
   very useful in data science, usually to filter out or filter in by the data format which ends or starts with
   something.

** TODO [#B] String methods to chop to get subString is very useful in DS :SCALA:
   String.drop(3).dropRight(2)

   //  LASBS060000000000003
   //  ^^^BS0600000000000^^
=======

** TODO [#B] Programming I/O and exception
    DEADLINE: <2018-04-17 Tue 09:00>
*** question
    build a input stream reading from a file and display the file content in console
*** requiement
    1. using the *loan patter* to handle IOException and FileNotFoundException
    2. need GUI, *file chooser* to choose the file you want to read, and a *dialog* to display alert if exception occur.

** TODO [#B] why we should always use BufferedInput/OutpuStream
   DEADLINE: <2018-04-17 Tue 09:00>

** TODO [#B] what is difference between double and double-as-string
   1. space cost?
   2. time cost?

** TODO [#B] serializable
   1. how to make some object serializable?
   2. how to serialize an object

** TODO [#B] 2 tags used to customize the serialization
   1. what are they.
   2. what problems they solve

** TODO [#B] Design a Chater programming :Programming:


*** requirement
    1. support private msg between user and user
    2. allow multiple users connecting and sending msg
    3. tips connected and disconnected
    4. support displaying user's name.

** TODO [#B] write a code snippet to get content from URL :Programming:
   DEADLINE: <2018-04-21 Sat 09:00>
   use 3 methods please.

** TODO [#B] write things back and forth :English:

** TODO [#B] how to hide and show function or comment block
   by ~HideShow-mode~, which is included with Emacs 20 and later
   [[https://www.emacswiki.org/emacs/HideShow][hide and show]]

   frequently used command:

   | C-c @ C-M-s | show all         |
   | C-c @ C-M-h | hide all         |
   | C-c @ C-s   | show block       |
   | C-c @ C-h   | hide block       |
   | C-c @ C-c   | toggle hide/show |

** TODO [#B] Manifest + Array(1)(0) :TechCombo:
    #+BEGIN_SRC scala
      class MutableDLL[A: Manifest] extends mutable.Buffer[A]{
        private class Node(var data: A, var prev: Node, var next: Node)
        private var end = new Node(new Array[A](1)(0),null, null)
      }
    #+END_SRC

    ~private var end = new Node(??? ,null, null)~
    because of the type of data we don't know now, so we can not give it a value. but as a concrete instance, ~end Node~ must have a value for his 1st Ctor argument.

    what can we do now?
    *wrap it by a type constructor, unwrap it by a method of this type constructor*

    The simple way to give a value to A, is *also do that in run-time*, means we also delegate this work to the guy who give a specific type of A.

    But how can we do that?

    *wrap* it in an container before ,then *unwrap* it by expression. Good news is we also don't deal with the element data directly. ~wrap~ is a type constructor and ~unwrap~ is an method defined in that type constructor.

** TODO [#B] define a list-likely type wich can add different stuff :Programming:
>>>>>>> 9948b14a747309f458e0f323f2cfdcfb6d2736cb

** TODO [#B] cache the copy yank
   spc r e

** TODO [#B] Latex divide symbol
  $\dfrac{(x - \mu)}\sigma$
  $(x - \mu)\div\sigma$
  $(x - \mu)/\sigma$

  3 symbols can use

  - \dfrac
  - \div
  - /

** TODO [#B] In ~visual~ state of vim some stange and useful hot key :EMACSKEY:
*** 1. wrap selected text by <s> in ~visual~ state
   | [visual] s + anychar | you will get 'anychar[selectedtext]anychar' |

   eg: you want to wrap 'love' with '*', you will do these steps:
   1. enter ~visual~ state by ~v~;
   2. make 'love' be the selected;
   3. press <s> then press <shift + 8>

   love -----select,<s>,<shift+8>-----> *love*
   you will get *love* !

*** 2. other hot-key to wrap
| [visual] s + f + input | input(selected)           |
| [visual] s + t + input | <input>(selected)</input> |
| [visual] s + b         | (selected)                |

   eg: you want to wrap 'love' with '*', you will do these steps:
   1. enter ~visual~ state by ~v~;
   2. make 'love' be the selected;
   3. press <s + f> then input 'hello' => 'hello(love)'
   3. press <s + b> then input 'hello' => '(love)'
   3. press <s + t> then input 'hello' => '<hello>love</hello>'

*** 3. copy file absolute path in dired
    C-0 w
** TODO [#B] Only edit content of current headline in a new buffer
   hotkey: C-x n s


** TODO [#B] how to handle the bable ipython
For many times, you can fix almost all the problems by restart the process
of ~ob~:
1. spc b i
2. m (marks all the ob prefix process)
3. D (delete all marks)
4. go back to the org src block, press C-c C-c to run and all the ob process
   will restart automatically

** DONE [#B] latex collect
   CLOSED: [2018-07-29 日 19:15]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-07-29 日 19:15]
   :END:
\begin{bmatrix}
    1 & 2 & 3 & 4 \\
    5 & 6 & 7 & 8
\end{bmatrix}^T
=
\begin{bmatrix}
    1 & 5 \\
    2 & 6 \\
    3 & 7 \\
    4 & 8
\end{bmatrix}
** DONE [#B] why normal major python-mode has minor company-mode
   CLOSED: [2018-08-04 六 01:09]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-04 六 01:09]
   :END:
   but not the major python-mode start from org file as src edit buffer.
   我初步的想法是:
   #+BEGIN_QUOTE
   1. python-mode 仅仅是先打开一个文件, 然后匹配的文件名是 py 而后执行的一条命令,
      也就是说 mode 不是什么特殊的东西就是命令. 你执行了这条命令他就是
      python-mode, 没执行就是 foundmental.
   2. python-mode 为什么会有 minor company-mode 是因为在 ananconda-mode 中还有一
      个叫做 anaconda-company 的 layer(layer is a concept only for spacemacs),
      里面定义了一个 python-mode 的 hook.
   3. src edit buffer started from org file 可能是因为上步骤的 hook 没有执行.
   #+END_QUOTE

   实际上原因很简单, 你可以通过配置(名字忘了)backend 来实现自动补全, 这个是
   ob-ipython 自带的,其 github 上有介绍, 但是超级超级慢.

** DONE [#B] 总结 graphviz 与 ipython 互通原理
   CLOSED: [2018-08-04 六 01:08]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-04 六 01:08]
   :END:

#+BEGIN_EXAMPLE

obj produced by other package
eg> tf.graph is actually a dict-like file

            |
            |
            | extract info
            |
            v                                                                                      +---- 1. specify the target type of
                                                                                                   |        deserialization
        by info                pipe().decode png svg to binary                                     |        display_formatter.formatters['image/svg+xml']
graphviz produce png, svg   ------------------------------------->   deserialization by ipython ---+
                               code like obj serialization                                         |
                                                                                                   |
                                                                                                   +-----2. specify the source type of
                                                                                                            deserialization
                                                                                                            for_type_by_name('dependencyPath', 'typeName', parseFunction)
#+END_EXAMPLE

** DONE [#B] 总结如何让 ob-ipython 使用指定的 anaconda env
   CLOSED: [2018-08-04 六 01:08]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-04 六 01:08]
   :END:
具体很不明确,可以通过以下三种方式来解决:
1. 在 terminal 时先激活相应环境, 而后再运行 emacs
2. 使用 emacs package pyenv, 然后指定 ~/ananconda/env/path 作为pyenv的 ~"WORKHOME"~ 通过菜单栏的 Virtual Envs 来指定你想要运行的 env
3. 通过设置 emacs 的PATH路径(eshell input: echo $PATH) 把某个 anaconda env 作为 emacs 的路径


但不管是那种方式, 当你想定义 ipython startup 时, 都需要在 ~/.ipython/profile_default/startup 下定义.

#+BEGIN_EXAMPLE

ipython in
anaconda env 1  ----+
                    |
ipython in          |  read
anaconda env 2  ----+--------------->  ~/.ipython
                    |
ipython in          |
anaconda env 3  ----+

#+END_EXAMPLE

** DONE [#B] 定制 ipython minor mode
   CLOSED: [2018-08-04 六 01:07]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-04 六 01:07]
   :END:

** DONE [#B] the example code of config the ipython and graphviz
   CLOSED: [2018-08-04 六 01:10]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-04 六 01:10]
   :END:
#+BEGIN_SRC ipython :tangle yes :session :exports code :async t :results raw drawer
  %matplotlib inline
  import numpy as np
  p = np.polynomial.Polynomial([1, 2, 3])
  p
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[1]:
[[file:./obipy-resources/gQpo5n.png]]
:END:



#+BEGIN_SRC ipython :tangle yes :session :exports code :async t :results raw drawer
  %matplotlib inline
  import tensorflow as tf

  g = tf.Graph()

  with g.as_default():
      a = tf.placeholder(tf.float32, name="a")
      b = tf.placeholder(tf.float32, name="b")
      c = a + b
  g
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[10]:
: <tensorflow.python.framework.ops.Graph at 0x7f810569ec50>
:END:

#+BEGIN_SRC ipython :tangle yes :session :exports code :async t :results raw drawer
  %matplotlib inline
  import tensorflow as tf

  g = tf.Graph()

  with g.as_default():
      a = tf.placeholder(tf.float32, name="a")
      b = tf.placeholder(tf.float32, name="b")
      c = a + b
  g
  tf_to_dot(g)
#+END_SRC

#+RESULTS:
:RESULTS:
0 - 9c638de8-b040-4f4e-aeaa-aeda89b50924
:END:

** DONE 餐馆左墙面词
   CLOSED: [2018-08-04 六 01:07]
   :LOGBOOK:
   - State "DONE"       from              [2018-08-04 六 01:07]
   :END:
 东坡有诗: 净洗铛，少著水，柴头罨烟焰不起。待他自熟莫催他，火候足时他自美。无事进
 店打两碗，饱得自家君莫管。

** DONE 餐馆右墙面词
   CLOSED: [2018-08-04 六 01:07]
   :LOGBOOK:
   - State "DONE"       from              [2018-08-04 六 01:07]
   :END:
 吾自幼好美食, 亦好烹饪, 更好交天下友. 彭城徐州自古至今都是小吃名都, 吾生于此, 敢
 承彭祖之志, 洗盏更酌开灶生火, 烹一二小菜煮若干鲜汤, 与君共享, 醉亦不妨把盏, 饱亦
 尚可谈欢, 愿您吃好喝好, 唇齿留香.

** DONE 正堂四字成语
   CLOSED: [2018-08-04 六 01:07]
   :LOGBOOK:
   - State "DONE"       from              [2018-08-04 六 01:07]
   :END:
 唇齿留香

** TODO Future task of org mode
   - [ ] https://www.youtube.com/watch?v=bRoSpJ23Kzk
   - [ ] https://www.youtube.com/watch?v=LFO2UbzbZhA&t=615s

** TODO build the yid_ML project
*** 信息搜集

- [ ] yasnippet

  可实现三种编程方式:

  1. # directive: yasnippet can be seen as the 'alias' of elisp code, ~#
     type:command~
  2. in body: yasnippet can execute elisp code wrap by ~` `~
  3. in mirror of palceholder: can transform the value of original value who
     ~${1: $(xxx yas-text)}~ has the same reference number.


- [ ] org babel and table
  [[*Using Code Blocks in Org Tables][Using Code Blocks in Org Tables]]

  Python src block 加入 :session 时, 他无法通过 :var 获取 table name, 只有在没有
  :session 时有效.

** DONE [#B] 解决了 org export 的两个问题 :ATTACH:
   CLOSED: [2018-08-05 日 23:14]
   :PROPERTIES:
   :Attachments: tbltest.org
   :ID:       53602bbe-117d-486d-9dfb-0db5d5da7925
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-05 日 23:14]
   :END:

   1. [ ] emacs org file export 时候如何指明 .css or .javascript 文件
   2. [ ] emacs org table export to html 的时候, column name 的排布不规则的问题



   对于问题1, 可以在头文件中指明, 见 tbltest.org.


   对于问题2, 可以使用我修改的 css 文件, 主要是把所有 "td.org-xxxx" 和
   "th.org-xxxx" 节点内容都改成: ~align-left~

** DONE [#B] solve yasnippet indent problem when expand trigger
   CLOSED: [2018-08-05 日 23:29]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-05 日 23:29]
   :END:

#+BEGIN_EXAMPLE
# name: ASCII home
# expand-env: ((yas-indent-line 'fixed) (yas-wrap-around-region 'nil)) <=== just add this line code
# --
                welcome to my
            X      humble
           / \      home,
          /   \      $0
         /     \
        /-------\
        |       |
        |  +-+  |
        |  | |  |
        +--+-+--+
#+END_EXAMPLE

** DONE [#B] 解决了 html page exported from org 都会在结尾留下 emacs 信息的问题
   CLOSED: [2018-08-05 日 23:39]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-05 日 23:39]
   :END:

  =C-c C-e # html= in exmac, =, e e # html= in spacemacs, 可以查看每次 export
  org to html 时默认会插入 org 文件的一些 #+OPTION 配置, 其中有一项:

  #+BEGIN_EXAMPLE
  #+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
  #+END_EXAMPLE

  将其中的 html-postamble:auto 设置为 html-postamble:nil 即可* Using Code Blocks in Org Tables
  :PROPERTIES:
  :CUSTOM_ID: spreadsheet
  :END:

  In addition to passing data from tables as arguments to code blocks, and
  storing results as tables, Babel can be used in a third way with Org-mode
  tables. First note that Org-mode's existing spreadsheet functionality allows
  values in cells to be computed automatically from the values of other cells,
  using a =#+TBLFM= formula line. In this way, table computations can be carried
  out using calc and emacs lisp.

  What Babel adds is the ability to use code blocks (in whatever
  language) in the =#+TBLFM= line to perform the necessary computation.

*** Example 1: Data Summaries Using R
    As a simple example, we'll fill in a cell in an Org-mode table with the
    average value of a few numbers. First, let's make some data. The
    following source block creates an Org-mode table filled with five random
    numbers between 0 and 1.

    : #+name: tbl-example-data
    : #+begin_src R
    : runif(n=5, min=0, max=1)
    : #+end_src

    #+name: tbl-example-data
    | 0.836685163900256 |
    | 0.696652316721156 |
    | 0.382423302158713 |
    | 0.987541858805344 |
    | 0.994794291909784 |

    Now we define a source block to calculate the mean of a table column.

    In the Org-mode file:
    : #+name: R-mean
    : #+begin_src R :var x=""
    : colMeans(x)
    : #+end_src

    HTML export of code:
    #+name: R-mean
    #+begin_src R :var x=""
colMeans(x)
    #+end_src

    Finally, we create the table which is going to make use of the R
    code. This is done using the =org-sbe= ('source block evaluate') macro in
    the table formula line.

    In the Org-mode file:
    : #+tblname: summaries
    : |              mean |
    : |-------------------|
    : | 0.779619386699051 |
    : #+TBLFM: @2$1='(org-sbe "R-mean" (x "tbl-example-data()"))

    HTML export of code:
    #+tblname: summaries
    | mean |
    |------|
    | 0.00 |
    #+TBLFM: @2$1='(org-sbe "R-mean" (x "tbl-example-data()"));%.2f

    To recalculate the table formula, use C-u C-c C-c in the table. Notice that
    as things stand the calculated value doesn't change, because the data (held
    in the table above named =tbl-example-data=) are static. However, if you
    delete that data table, then the reference will be interpreted as a
    reference to the source block responsible for generating the data; each time
    the table formula is recalculated the source block will be evaluated again,
    and therefore the calculated average value will change.

*** Example 2: Babel Test Suite
    While developing Babel, we used a suite of tests implemented as a large
    Org-mode table. To run the entire test suite we simply evaluate the table
    with C-u C-c C-c: all of the tests are run, the results are compared with
    expectations, and the table is updated with results and pass/fail
    statistics.

    Here's a sample of our test suite.

    In the Org-mode file:

    : #+TBLNAME: org-babel-tests
    : | functionality    | block        | arg |    expected |     results | pass |
    : |------------------+--------------+-----+-------------+-------------+------|
    : | basic evaluation |              |     |             |             | pass |
    : |------------------+--------------+-----+-------------+-------------+------|
    : | emacs lisp       | basic-elisp  |   2 |           4 |           4 | pass |
    : | shell            | basic-shell  |     |           6 |           6 | pass |
    : | ruby             | basic-ruby   |     |   org-babel |   org-babel | pass |
    : | python           | basic-python |     | hello world | hello world | pass |
    : | R                | basic-R      |     |          13 |          13 | pass |
    : #+TBLFM: $5='(if (= (length $3) 1) (sbe $2 (n $3)) (sbe $2)) :: $6='(if (string= $4 $5) "pass" (format "expected %S but was %S" $4 $5))

    HTML export of code:

    #+TBLNAME: org-babel-tests
    | functionality    | block        | arg |    expected |     results | pass |
    |------------------+--------------+-----+-------------+-------------+------|
    | basic evaluation |              |     |             |             | pass |
    |------------------+--------------+-----+-------------+-------------+------|
    | emacs lisp       | basic-elisp  |   2 |           4 |           4 | pass |
    | shell            | basic-shell  |     |           6 |           6 | pass |
    | ruby             | basic-ruby   |     |   org-babel |   org-babel | pass |
    | python           | basic-python |     | hello world | hello world | pass |
    | R                | basic-R      |     |          13 |          13 | pass |
    #+TBLFM: $5='(if (= (length $3) 1) (sbe $2 (n $3)) (sbe $2)) :: $6='(if (string= $4 $5) "pass" (format "expected %S but was %S" $4 $5))

**** code blocks for tests

     In the Org-mode file:

     : #+name: basic-elisp(n)
     : #+begin_src emacs-lisp
     : (* 2 n)
     : #+end_src

     HTML export of code:

     #+name: basic-elisp(n=0)
     #+begin_src emacs-lisp
  (* 2 n)
     #+end_src

     In the Org-mode file:
     : #+name: basic-shell
     : #+begin_src sh :results silent
     : expr 1 + 5
     : #+end_src

     HTML export of code:
     #+name: basic-shell
     #+begin_src sh :results silent
  expr 1 + 5
     #+end_src

     In the Org-mode file:
     : #+name: date-simple
     : #+begin_src sh :results silent
     : date
     : #+end_src

     HTML export of code:
     #+name: date-simple
     #+begin_src sh :results silent
  date
     #+end_src

     In the Org-mode file:
     : #+name: basic-ruby
     : #+begin_src ruby :results silent
     : "org-babel"
     : #+end_src

     HTML export of code:
     #+name: basic-ruby
     #+begin_src ruby :results silent
  "org-babel"
     #+end_src

     In the Org-mode file
     : #+name: basic-python
     : #+begin_src python :results silent
     : 'hello world'
     : #+end_src

     HTML export of code:
     #+name: basic-python
     #+begin_src python :results silent
  'hello world'
     #+end_src

     In the Org-mode file:
     : #+name: basic-R
     : #+begin_src R :results silent
     : b <- 9
     : b + 4
     : #+end_src

     HTML export of code:
     #+name: basic-R
     #+begin_src R :results silent
  b <- 9
  b + 4
     #+end_src

** DONE [#B] 解决了每次 export org to html 都会运行代码的问题
   CLOSED: [2018-08-05 日 23:44]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-05 日 23:44]
   :END:

1. 在 org 文件的 *最开头一行*, 输入一行语句: ~# -*- org-export-babel-evaluate:
   nil -*-~

2. 设置一个 PROPERTY 选项, 作为 org 文件属性放在文件上方: ~#+PROPERTY: header-args :eval never-export~

** DONE [#B] 解决了 org to export html 时进行本地预览的问题
   CLOSED: [2018-08-05 日 23:51]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-05 日 23:51]
   :END:

把 .css or .javascript 文件放在 .org 相同目录(或者其他地方也可以这种方法更方便修
改), 然后通过 #+HTML_HEAD: 来告知该 org 文件, 当你 export to html 时, 应该使用文
件中指定 .css or javascript 文件.

#+BEGIN_EXAMPLE
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="theme/org-nav-theme.css" >
#+HTML_HEAD: <script src="theme/org-nav-theme.js"></script>
#+HTML_HEAD: <script type="text/javascript">
#+HTML_HEAD: <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

文档目录实例:

tensorflow_中文十课:
     |-- lec1.org
     |-- theme/
             |-- org-nav-theme.css
             |-- org-nav-theme.js
#+END_EXAMPLE

** DONE [#B] 不同的 latex 模块化格式
   CLOSED: [2018-08-19 日 08:05]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-19 日 08:05]
   :END:

\begin{array}
begin: \\
\hspace{10mm}m_{0} \leftarrow 0  \\
\hspace{10mm}v_{0} \leftarrow 0 \\
\hspace{10mm}t \leftarrow 0 \\
\hspace{10mm}while \ \theta_t do not converge:\\
\hspace{10mm}\hspace{10mm}t \leftarrow t + 1\\
\end{array}


{eqnarray} 是居中对齐+ 表达式标号
{eqnarray*} 是右对齐 + +表达式标号+

\begin{eqnarray*}
begin: \\
m\_{0} \leftarrow  \\
v\_{0} \leftarrow 0 \\
t \leftarrow 0 \\
while \theta_t do not converge:\\
\hspace{10mm}t \leftarrow t + 1\\
\end{eqnarray*}


注意普通的 ~$xxx$~8 并不换行, 有了 ~\begin~ 就不需要 ~$$~ 了

** DONE [#B] 上面的 todo 最终定稿
   CLOSED: [2018-08-19 日 08:05]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2018-08-19 日 08:05]
   :END:

https://ntumlds.files.wordpress.com/2017/03/e89ea2e5b995e5bfabe785a7-2017-06-10-e4b88be58d8812-23-57.png?w=579&h=365



\begin{array}
\text{begin:} \\
\hspace{10mm}m_{0} \leftarrow 0  \\
\hspace{10mm}v_{0} \leftarrow 0 \\
\hspace{10mm}t \leftarrow 0 \\
\hspace{10mm}while \ \ \theta_t \ \  do \ \  not \ \  converge:\\
\hspace{10mm}\hspace{10mm}t \leftarrow t + 1\\
\hspace{10mm}\hspace{10mm}g_t \leftarrow \nabla_{\theta}f_t(\theta_{t-1}) \cdot{g_t}\\
\hspace{10mm}\hspace{10mm}m_t \leftarrow \beta_1\cdot{m_{t-1}+(1-\beta_1)\cdot{g_t}} \\
\hspace{10mm}\hspace{10mm}v_t \leftarrow \beta_2\cdot{v_{t-1}+(1-\beta_2)\cdot{g^2_t}}\\
\hspace{10mm}\hspace{10mm}\hat{m_t} \leftarrow m_t/(1-\beta^t_1)\\
\hspace{10mm}\hspace{10mm}\hat{v_t} \leftarrow v_t/(1-\beta^t_2)\\
\hspace{10mm}\hspace{10mm}\hat{\theta_t} \leftarrow \theta_{t-1} - \alpha\cdot\hat{m_t}/(\sqrt{\hat{v_t}}+\epsilon)\\
\text{end} \\
\end{array}
** 李宏毅 2018 视频课程
   - [ ] GAN 1
     - [ ] Algo of GAN
   - [ ] GAN 2
   - [ ] GAN
   - [ ] GAN
   - [ ] GAN
   - [ ] GAN
   - [ ] GAN
   - [ ] GAN
   - [ ] GAN
   - [ ] GAN
   - [ ] GAN
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] DeepLeaning Theory
   - [ ] Deep RL1
   - [ ] Deep RL1
   - [ ] Deep RL1
   - [ ] Deep RL1
   - [ ] Deep RL1
   - [ ] Deep RL1
   - [ ] Deep RL1
   - [ ] Deep RL1
   - [ ] Deep RL1

** DONE 林轩田最后一章内容
   CLOSED: [2018-08-22 三 17:27]
   :LOGBOOK:
   - State "DONE"       from              [2018-08-22 三 17:27]
   :END:
** 林轩田 FuKuML 代码实现
** 简历回答
** 总结林轩田所有公式
** 学习 cmu10405(大数据下使用ML)
* pomodoro
** TODO [#B] clojure for the brave and truth
   :LOGBOOK:
   CLOCK: [2019-07-16 二 15:49]--[2019-07-16 二 16:14] =>  0:25
   CLOCK: [2019-07-16 二 14:21]--[2019-07-16 二 14:46] =>  0:25
   CLOCK: [2019-07-16 二 13:45]--[2019-07-16 二 14:10] =>  0:25
   CLOCK: [2019-07-16 二 11:36]--[2019-07-16 二 12:01] =>  0:25
   :END:

  
